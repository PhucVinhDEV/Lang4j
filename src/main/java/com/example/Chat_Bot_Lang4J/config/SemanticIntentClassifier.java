package com.example.Chat_Bot_Lang4J.config;

import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.data.embedding.Embedding;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Service
@Slf4j
public class SemanticIntentClassifier {

    private final EmbeddingModel embeddingModel;
    private final LocalEmbeddingService localEmbeddingService;

    @Value("${embedding.use-local:false}")
    private boolean useLocalEmbedding;

    @Value("${embedding.fallback-enabled:true}")
    private boolean fallbackEnabled;

    public SemanticIntentClassifier(EmbeddingModel embeddingModel, LocalEmbeddingService localEmbeddingService) {
        this.embeddingModel = embeddingModel;
        this.localEmbeddingService = localEmbeddingService;
    }

    // üéØ 3 Intent Ch√≠nh - Optimized for Chatbot Routing
    private static final Map<String, List<String>> INTENT_EXAMPLES = Map.of(

            "DATABASE_QUERY", Arrays.asList(
                    // üóÑÔ∏è FUNCTION CALLING - Structured Data Queries
                    // ID v√† th√¥ng tin c·ª• th·ªÉ
                    "S·∫£n ph·∫©m ID 5 gi√° bao nhi√™u",
                    "Cho t√¥i bi·∫øt gi√° c·ªßa iPhone",
                    "Hi·ªÉn th·ªã chi ti·∫øt product ID 10",
                    "Gi√° MacBook l√† bao nhi√™u",
                    "Product 15 c√≥ c√≤n h√†ng kh√¥ng",
                    "Th√¥ng tin s·∫£n ph·∫©m m√£ s·ªë 20",
                    "Xem chi ti·∫øt s·∫£n ph·∫©m ID 100",

                    // T·ªìn kho v√† s·ªë l∆∞·ª£ng
                    "T·ªìn kho c√≤n bao nhi√™u s·∫£n ph·∫©m",
                    "Stock quantity c·ªßa Samsung Galaxy",
                    "S·ªë l∆∞·ª£ng h√†ng t·ªìn kho hi·ªán t·∫°i",
                    "Ki·ªÉm tra t·ªìn kho s·∫£n ph·∫©m",
                    "C√≤n bao nhi√™u c√°i trong kho",
                    "S·∫£n ph·∫©m n√†o s·∫Øp h·∫øt h√†ng",
                    "Stock d∆∞·ªõi 10 s·∫£n ph·∫©m",

                    // Th·ªëng k√™ v√† b√°o c√°o
                    "Th·ªëng k√™ s·ªë l∆∞·ª£ng danh m·ª•c",
                    "C√≥ bao nhi√™u s·∫£n ph·∫©m ƒëi·ªán t·ª≠",
                    "T·ªïng s·ªë s·∫£n ph·∫©m trong h·ªá th·ªëng",
                    "B√°o c√°o t√¨nh h√¨nh kinh doanh",
                    "Th·ªëng k√™ doanh s·ªë",
                    "Danh s√°ch t·∫•t c·∫£ categories",
                    "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo danh m·ª•c",

                    // Kho·∫£ng gi√° v√† range queries
                    "S·∫£n ph·∫©m t·ª´ 10 tri·ªáu ƒë·∫øn 20 tri·ªáu",
                    "T√¨m s·∫£n ph·∫©m d∆∞·ªõi 5 tri·ªáu",
                    "Laptop trong kho·∫£ng 15-25 tri·ªáu",
                    "ƒêi·ªán tho·∫°i gi√° t·ª´ 8-12 tri·ªáu",
                    "S·∫£n ph·∫©m tr√™n 30 tri·ªáu",
                    "T√¨m theo kho·∫£ng gi√° c·ª• th·ªÉ",

                    // Danh m·ª•c c·ª• th·ªÉ
                    "Danh m·ª•c s·ªë 2 c√≥ g√¨",
                    "Category 1 g·ªìm nh·ªØng s·∫£n ph·∫©m n√†o",
                    "S·∫£n ph·∫©m thu·ªôc nh√≥m ƒëi·ªán t·ª≠",
                    "Danh s√°ch s·∫£n ph·∫©m category electronics",
                    "Xem t·∫•t c·∫£ s·∫£n ph·∫©m trong danh m·ª•c"),

            "VECTOR_SEARCH", Arrays.asList(
                    // üìÑ SEMANTIC SEARCH - Contextual & Advisory Queries
                    // G·ª£i √Ω v√† t∆∞ v·∫•n
                    "G·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p cho t√¥i",
                    "T∆∞ v·∫•n laptop cho sinh vi√™n",
                    "Recommend ƒëi·ªán tho·∫°i t·ªët nh·∫•t",
                    "S·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa t√¥i",
                    "H√£y gi√∫p t√¥i ch·ªçn laptop gaming",
                    "B·∫°n c√≥ th·ªÉ t∆∞ v·∫•n cho t√¥i kh√¥ng",
                    "Cho t√¥i l·ªùi khuy√™n v·ªÅ s·∫£n ph·∫©m",
                    "N√™n mua g√¨ cho ng∆∞·ªùi gi√†",
                    "S·∫£n ph·∫©m t·ªët nh·∫•t trong t·∫ßm gi√°",
                    "Recommendation cho d√¢n vƒÉn ph√≤ng",

                    // So s√°nh v√† ƒë√°nh gi√°
                    "So s√°nh c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª±",
                    "ƒê√¢u l√† s·ª± kh√°c bi·ªát gi·ªØa iPhone v√† Samsung",
                    "∆Øu nh∆∞·ª£c ƒëi·ªÉm c·ªßa s·∫£n ph·∫©m n√†y",
                    "Review v√† ƒë√°nh gi√° chi ti·∫øt",
                    "Pros and cons c·ªßa laptop n√†y",
                    "Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh ƒëi·ªÉm y·∫øu",
                    "ƒê√°nh gi√° t·ªïng quan v·ªÅ s·∫£n ph·∫©m",

                    // M√¥ t·∫£ v√† features
                    "M√¥ t·∫£ ƒë·∫∑c ƒëi·ªÉm c·ªßa s·∫£n ph·∫©m n√†y",
                    "Features ch√≠nh c·ªßa laptop n√†y",
                    "T√≠nh nƒÉng n·ªïi b·∫≠t l√† g√¨",
                    "ƒêi·ªÉm m·∫°nh c·ªßa s·∫£n ph·∫©m",
                    "Specification v√† th√¥ng s·ªë k·ªπ thu·∫≠t",
                    "ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t",
                    "T√≠nh nƒÉng ƒë·∫∑c bi·ªát",

                    // Use cases v√† scenarios
                    "Laptop n√†o ph√π h·ª£p cho designer",
                    "ƒêi·ªán tho·∫°i ch·ª•p ·∫£nh ƒë·∫πp",
                    "S·∫£n ph·∫©m cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
                    "Thi·∫øt b·ªã ph√π h·ª£p cho c√¥ng vi·ªác",
                    "S·∫£n ph·∫©m cho h·ªçc sinh sinh vi√™n",

                    // Document v√† knowledge search
                    "T√¨m ki·∫øm trong documents",
                    "C√≥ file PDF n√†o v·ªÅ ch·ªß ƒë·ªÅ n√†y kh√¥ng",
                    "T√†i li·ªáu h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
                    "Manual v√† catalog s·∫£n ph·∫©m",
                    "Th√¥ng tin t·ª´ kho t√†i li·ªáu"),

            "HYBRID", Arrays.asList(
                    // üîÑ GENERAL LLM - Conversational & General Queries
                    // Ch√†o h·ªèi v√† conversation
                    "Xin ch√†o",
                    "Hello",
                    "B·∫°n kh·ªèe kh√¥ng",
                    "C·∫£m ∆°n b·∫°n",
                    "T·∫°m bi·ªát",
                    "B·∫°n l√† ai",
                    "B·∫°n c√≥ th·ªÉ l√†m g√¨",

                    // C√¢u h·ªèi chung chung
                    "Gi·∫£i th√≠ch cho t√¥i v·ªÅ AI",
                    "T√¥i mu·ªën bi·∫øt v·ªÅ c√¥ng ngh·ªá",
                    "H√¥m nay th·∫ø n√†o",
                    "B·∫°n nghƒ© sao v·ªÅ ƒëi·ªÅu n√†y",
                    "C√≥ √Ω ki·∫øn g√¨ kh√¥ng",

                    // Y√™u c·∫ßu chung
                    "Gi√∫p t√¥i hi·ªÉu v·ªÅ h·ªá th·ªëng n√†y",
                    "L√†m th·∫ø n√†o ƒë·ªÉ s·ª≠ d·ª•ng",
                    "H∆∞·ªõng d·∫´n t√¥i",
                    "T√¥i c·∫ßn tr·ª£ gi√∫p",
                    "C√≥ th·ªÉ h·ªó tr·ª£ t√¥i kh√¥ng",

                    // C√¢u h·ªèi m∆° h·ªì
                    "C√≤n g√¨ kh√°c kh√¥ng",
                    "T√¥i mu·ªën t√¨m hi·ªÉu th√™m",
                    "C√≥ g√¨ th√∫ v·ªã",
                    "N√≥i cho t√¥i bi·∫øt",
                    "T√¥i quan t√¢m ƒë·∫øn",

                    // Educational v√† general knowledge
                    "Blockchain l√† g√¨",
                    "Machine Learning ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o",
                    "Xu h∆∞·ªõng c√¥ng ngh·ªá hi·ªán t·∫°i",
                    "L·ªãch s·ª≠ ph√°t tri·ªÉn AI",
                    "T∆∞∆°ng lai c·ªßa c√¥ng ngh·ªá"));

    // Cache embeddings ƒë·ªÉ t·ªëi ∆∞u performance - Thread-safe
    private final Map<String, List<Embedding>> intentEmbeddingsCache = new ConcurrentHashMap<>();

    // Cache user embeddings (v·ªõi TTL - c√≥ th·ªÉ implement sau)
    private final Map<String, Embedding> userEmbeddingCache = new ConcurrentHashMap<>();

    // üìä Tuned thresholds cho 3 intent system
    private static final double BASE_CONFIDENCE_THRESHOLD = 0.70; // Lowered for 3-way classification
    private static final double HIGH_CONFIDENCE_THRESHOLD = 0.85;
    private static final double MIN_CONFIDENCE_THRESHOLD = 0.55; // More lenient

    /**
     * üß† Enhanced intent classification cho 3 intent system
     */
    public IntentClassificationResult classifyIntent(String userMessage) {
        // Validation
        if (userMessage == null || userMessage.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è Empty or null user message provided");
            return new IntentClassificationResult("HYBRID", 0.0, false, Map.of(), "Empty message");
        }

        if (userMessage.length() > 500) {
            log.warn("‚ö†Ô∏è User message too long: {} characters", userMessage.length());
            userMessage = userMessage.substring(0, 500); // Truncate
        }

        try {
            log.info("üß† Classifying intent for: {}", userMessage);

            // Check cache first
            Embedding userEmbedding = getUserEmbedding(userMessage);

            String bestIntent = "HYBRID";
            double bestScore = 0.0;
            Map<String, Double> allScores = new HashMap<>();

            // So s√°nh v·ªõi t·ª´ng intent
            for (String intent : INTENT_EXAMPLES.keySet()) {
                double avgSimilarity = calculateIntentSimilarity(userEmbedding, intent);
                allScores.put(intent, avgSimilarity);

                if (avgSimilarity > bestScore) {
                    bestScore = avgSimilarity;
                    bestIntent = intent;
                }
            }

            // üéØ Enhanced dynamic threshold cho 3-way classification
            double dynamicThreshold = calculateDynamicThreshold(allScores, bestScore);
            boolean isConfident = bestScore >= dynamicThreshold;

            // Special boost for very clear DATABASE patterns (numbers, IDs, "gi√°", "s·ªë
            // l∆∞·ª£ng")
            if (bestIntent.equals("DATABASE_QUERY") && containsStructuredKeywords(userMessage)) {
                isConfident = true;
                log.info("üéØ DATABASE_QUERY confidence boost due to structured keywords");
            }

            // Additional confidence boost for clear patterns
            if (bestScore > HIGH_CONFIDENCE_THRESHOLD) {
                isConfident = true;
            }

            log.info("üéØ Intent: {} | Score: {:.3f} | Threshold: {:.3f} | Confident: {}",
                    bestIntent, bestScore, dynamicThreshold, isConfident);

            return new IntentClassificationResult(
                    bestIntent,
                    bestScore,
                    isConfident,
                    allScores,
                    String.format("Threshold: %.3f, Keywords: %s", dynamicThreshold,
                            containsStructuredKeywords(userMessage) ? "Yes" : "No"));

        } catch (Exception e) {
            log.error("‚ùå Error in intent classification", e);
            return new IntentClassificationResult("HYBRID", 0.0, false, Map.of(),
                    "Error: " + e.getMessage());
        }
    }

    /**
     * üéØ Detect structured keywords cho DATABASE_QUERY
     */
    private boolean containsStructuredKeywords(String message) {
        String lowerMessage = message.toLowerCase();

        // Keywords cho DATABASE queries
        String[] dbKeywords = {
                "id", "gi√°", "price", "s·ªë l∆∞·ª£ng", "quantity", "stock", "t·ªìn kho",
                "th·ªëng k√™", "statistics", "b√°o c√°o", "report", "category", "danh m·ª•c",
                "t·ª´", "ƒë·∫øn", "d∆∞·ªõi", "tr√™n", "kho·∫£ng", "range", "tri·ªáu", "ngh√¨n"
        };

        // Number patterns
        boolean hasNumbers = lowerMessage.matches(".*\\d+.*");

        // Keyword match
        boolean hasDbKeywords = Arrays.stream(dbKeywords)
                .anyMatch(lowerMessage::contains);

        return hasNumbers || hasDbKeywords;
    }

    /**
     * üîÑ Get or create user embedding with caching and fallback
     */
    private Embedding getUserEmbedding(String userMessage) {
        // Simple cache key (c√≥ th·ªÉ improve b·∫±ng hash)
        String cacheKey = userMessage.toLowerCase().trim();

        return userEmbeddingCache.computeIfAbsent(cacheKey, key -> {
            try {
                return createEmbeddingWithFallback(userMessage);
            } catch (Exception e) {
                log.error("‚ùå Failed to create user embedding with fallback for: '{}'",
                        userMessage.substring(0, Math.min(50, userMessage.length())), e);
                throw new RuntimeException("Failed to create embedding", e);
            }
        });
    }

    /**
     * üéØ Enhanced dynamic threshold cho 3-way classification
     */
    private double calculateDynamicThreshold(Map<String, Double> allScores, double bestScore) {
        List<Double> scores = new ArrayList<>(allScores.values());
        scores.sort(Collections.reverseOrder());

        if (scores.size() < 2) {
            return BASE_CONFIDENCE_THRESHOLD;
        }

        double firstScore = scores.get(0);
        double secondScore = scores.get(1);
        double gap = firstScore - secondScore;

        // V·ªõi 3 intent, gap nh·ªè h∆°n n√™n adjust threshold
        if (gap > 0.12) { // Large gap ‚Üí confident h∆°n
            return Math.max(MIN_CONFIDENCE_THRESHOLD, BASE_CONFIDENCE_THRESHOLD - 0.08);
        }

        if (gap < 0.03) { // Small gap ‚Üí c·∫ßn confident h∆°n
            return Math.min(HIGH_CONFIDENCE_THRESHOLD, BASE_CONFIDENCE_THRESHOLD + 0.12);
        }

        return BASE_CONFIDENCE_THRESHOLD;
    }

    /**
     * üìä Enhanced similarity calculation v·ªõi error handling
     */
    private double calculateIntentSimilarity(Embedding userEmbedding, String intent) {
        try {
            List<Embedding> intentEmbeddings = getIntentEmbeddings(intent);

            if (intentEmbeddings.isEmpty()) {
                log.warn("‚ö†Ô∏è No embeddings found for intent: {}", intent);
                return 0.0;
            }

            double totalSimilarity = 0.0;
            int validEmbeddings = 0;

            for (Embedding intentEmbedding : intentEmbeddings) {
                try {
                    double similarity = cosineSimilarity(userEmbedding, intentEmbedding);
                    if (!Double.isNaN(similarity) && !Double.isInfinite(similarity)) {
                        totalSimilarity += similarity;
                        validEmbeddings++;
                    }
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Error calculating similarity for intent: {}", intent, e);
                }
            }

            return validEmbeddings > 0 ? totalSimilarity / validEmbeddings : 0.0;

        } catch (Exception e) {
            log.error("‚ùå Error in calculateIntentSimilarity for intent: {}", intent, e);
            return 0.0;
        }
    }

    /**
     * üõ°Ô∏è Resilient Embedding Creation with Fallback
     * 
     * T·∫°o embedding v·ªõi fallback mechanism ƒë·ªÉ tr√°nh quota issues
     */
    private Embedding createEmbeddingWithFallback(String text) {
        // 1. N·∫øu ƒë∆∞·ª£c config ƒë·ªÉ s·ª≠ d·ª•ng local embedding
        if (useLocalEmbedding) {
            log.debug("üè† Using local embedding for: '{}'", text.substring(0, Math.min(30, text.length())));
            return localEmbeddingService.embedText(text);
        }

        // 2. Th·ª≠ primary embedding model (Vertex AI)
        try {
            Embedding embedding = embeddingModel.embed(text).content();
            if (embedding != null && embedding.vector() != null) {
                return embedding;
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Primary embedding failed for '{}'. Error: {}",
                    text.substring(0, Math.min(30, text.length())), e.getMessage());

            // 3. Fallback to local embedding if enabled
            if (fallbackEnabled) {
                log.info("üîÑ Falling back to local embedding for: '{}'",
                        text.substring(0, Math.min(30, text.length())));
                return localEmbeddingService.embedText(text);
            } else {
                throw new RuntimeException("Embedding creation failed and fallback is disabled", e);
            }
        }

        // 4. Fallback n·∫øu primary tr·∫£ v·ªÅ null
        if (fallbackEnabled) {
            log.warn("‚ö†Ô∏è Primary embedding returned null, using fallback for: '{}'",
                    text.substring(0, Math.min(30, text.length())));
            return localEmbeddingService.embedText(text);
        }

        throw new RuntimeException("Failed to create embedding for text: " + text);
    }

    /**
     * üîÑ Enhanced cached embeddings v·ªõi fallback mechanism
     */
    private List<Embedding> getIntentEmbeddings(String intent) {
        return intentEmbeddingsCache.computeIfAbsent(intent, key -> {
            List<String> examples = INTENT_EXAMPLES.get(key);
            if (examples == null) {
                log.warn("‚ö†Ô∏è No examples found for intent: {}", key);
                return new ArrayList<>();
            }

            List<Embedding> embeddings = new ArrayList<>();
            int successCount = 0;
            int fallbackCount = 0;

            for (String example : examples) {
                try {
                    Embedding embedding = createEmbeddingWithFallback(example);
                    if (embedding != null && embedding.vector() != null) {
                        embeddings.add(embedding);
                        successCount++;

                        // Track if we used local embedding
                        if (useLocalEmbedding) {
                            fallbackCount++;
                        }
                    }
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Failed to create embedding for example: {} (intent: {})", example, key, e);
                }
            }

            log.info("üíæ Cached {} embeddings for intent: {} (from {} examples) - Local: {}/{}",
                    embeddings.size(), key, examples.size(), fallbackCount, successCount);
            return embeddings;
        });
    }

    /**
     * üìê Enhanced cosine similarity v·ªõi validation
     */
    private double cosineSimilarity(Embedding a, Embedding b) {
        if (a == null || b == null || a.vector() == null || b.vector() == null) {
            log.warn("‚ö†Ô∏è Null embedding provided for similarity calculation");
            return 0.0;
        }

        float[] vectorA = a.vector();
        float[] vectorB = b.vector();

        if (vectorA.length != vectorB.length) {
            log.warn("‚ö†Ô∏è Vector dimensions mismatch: {} vs {}", vectorA.length, vectorB.length);
            return 0.0;
        }

        if (vectorA.length == 0) {
            log.warn("‚ö†Ô∏è Empty vectors provided");
            return 0.0;
        }

        double dotProduct = 0.0;
        double normA = 0.0;
        double normB = 0.0;

        for (int i = 0; i < vectorA.length; i++) {
            dotProduct += vectorA[i] * vectorB[i];
            normA += vectorA[i] * vectorA[i];
            normB += vectorB[i] * vectorB[i];
        }

        if (normA == 0.0 || normB == 0.0) {
            log.warn("‚ö†Ô∏è Zero norm vector detected");
            return 0.0;
        }

        double similarity = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));

        // Clamp to [-1, 1] range
        return Math.max(-1.0, Math.min(1.0, similarity));
    }

    /**
     * üîç Enhanced debug v·ªõi detailed analysis
     */
    public Map<String, Object> debugClassification(String userMessage) {
        if (userMessage == null || userMessage.trim().isEmpty()) {
            return Map.of("error", "Empty message provided");
        }

        try {
            Embedding userEmbedding = getUserEmbedding(userMessage);
            Map<String, Object> debug = new HashMap<>();
            debug.put("message", userMessage);
            debug.put("messageLength", userMessage.length());
            debug.put("userEmbeddingDimension", userEmbedding.vector().length);
            debug.put("hasStructuredKeywords", containsStructuredKeywords(userMessage));

            Map<String, Map<String, Double>> detailedScores = new HashMap<>();
            Map<String, Double> intentAverages = new HashMap<>();

            for (String intent : INTENT_EXAMPLES.keySet()) {
                Map<String, Double> exampleScores = new HashMap<>();
                List<String> examples = INTENT_EXAMPLES.get(intent);
                double totalScore = 0.0;
                int validScores = 0;

                for (String example : examples) {
                    try {
                        Embedding exampleEmbedding = embeddingModel.embed(example).content();
                        double similarity = cosineSimilarity(userEmbedding, exampleEmbedding);
                        exampleScores.put(example, similarity);

                        if (!Double.isNaN(similarity) && !Double.isInfinite(similarity)) {
                            totalScore += similarity;
                            validScores++;
                        }
                    } catch (Exception e) {
                        exampleScores.put(example, 0.0);
                        log.warn("‚ö†Ô∏è Error in debug for example: {}", example, e);
                    }
                }

                detailedScores.put(intent, exampleScores);
                intentAverages.put(intent, validScores > 0 ? totalScore / validScores : 0.0);
            }

            debug.put("detailedScores", detailedScores);
            debug.put("intentAverages", intentAverages);
            debug.put("cacheSize", userEmbeddingCache.size());
            debug.put("intentCacheSize", intentEmbeddingsCache.size());

            return debug;

        } catch (Exception e) {
            log.error("‚ùå Error in debug classification", e);
            return Map.of("error", e.getMessage());
        }
    }

    /**
     * üßπ Cache management
     */
    public void clearUserCache() {
        userEmbeddingCache.clear();
        log.info("üßπ Cleared user embedding cache");
    }

    public void clearIntentCache() {
        intentEmbeddingsCache.clear();
        log.info("üßπ Cleared intent embedding cache");
    }

    public Map<String, Integer> getCacheStats() {
        return Map.of(
                "userCacheSize", userEmbeddingCache.size(),
                "intentCacheSize", intentEmbeddingsCache.size(),
                "totalIntentExamples", INTENT_EXAMPLES.values().stream()
                        .mapToInt(List::size).sum());
    }

    /**
     * üìö Enhanced learning t·ª´ feedback
     */
    public void addTrainingExample(String message, String correctIntent, double confidence) {
        if (confidence >= 0.8 && INTENT_EXAMPLES.containsKey(correctIntent)) {
            log.info("üìö Learning opportunity: '{}' should be classified as {} (confidence: {:.3f})",
                    message, correctIntent, confidence);

            // TODO: Implement online learning
            // Could add to a learning queue for batch updates
        }
    }

    /**
     * üéØ Enhanced Result class
     */
    public static class IntentClassificationResult {
        private final String intent;
        private final double confidence;
        private final boolean isConfident;
        private final Map<String, Double> allScores;
        private final String additionalInfo;

        public IntentClassificationResult(String intent, double confidence, boolean isConfident,
                Map<String, Double> allScores, String additionalInfo) {
            this.intent = intent;
            this.confidence = confidence;
            this.isConfident = isConfident;
            this.allScores = allScores != null ? new HashMap<>(allScores) : new HashMap<>();
            this.additionalInfo = additionalInfo;
        }

        // Constructor for backward compatibility
        public IntentClassificationResult(String intent, double confidence, boolean isConfident,
                Map<String, Double> allScores) {
            this(intent, confidence, isConfident, allScores, "");
        }

        // Getters
        public String getIntent() {
            return intent;
        }

        public double getConfidence() {
            return confidence;
        }

        public boolean isConfident() {
            return isConfident;
        }

        public Map<String, Double> getAllScores() {
            return new HashMap<>(allScores);
        }

        public String getAdditionalInfo() {
            return additionalInfo;
        }

        public String getSecondBestIntent() {
            return allScores.entrySet().stream()
                    .filter(entry -> !entry.getKey().equals(intent))
                    .max(Map.Entry.comparingByValue())
                    .map(Map.Entry::getKey)
                    .orElse("UNKNOWN");
        }

        public double getConfidenceGap() {
            double bestScore = confidence;
            double secondBest = allScores.entrySet().stream()
                    .filter(entry -> !entry.getKey().equals(intent))
                    .mapToDouble(Map.Entry::getValue)
                    .max()
                    .orElse(0.0);
            return bestScore - secondBest;
        }

        @Override
        public String toString() {
            return String.format("Intent: %s (%.3f) - Confident: %s - Gap: %.3f - %s",
                    intent, confidence, isConfident, getConfidenceGap(), additionalInfo);
        }
    }
}