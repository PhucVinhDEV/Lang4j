package com.example.Chat_Bot_Lang4J.controller;

import com.example.Chat_Bot_Lang4J.Data.Entity.Categories;
import com.example.Chat_Bot_Lang4J.Data.Entity.Product;
import com.example.Chat_Bot_Lang4J.Data.Service.DatabaseService;
import com.example.Chat_Bot_Lang4J.Data.Vector.VectorService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
@RequestMapping("/api/data")
public class DataController {

    private final DatabaseService databaseService;
    private final VectorService vectorService;

    /**
     * Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u
     * POST /api/data/init-sample-data
     */
    @PostMapping("/init-sample-data")
    public ResponseEntity<Map<String, Object>> initSampleData() {
        try {
            log.info("üöÄ Initializing sample data...");

            // T·∫°o categories m·∫´u
            Categories electronics = new Categories(1L, "ƒêi·ªán t·ª≠", "C√°c s·∫£n ph·∫©m ƒëi·ªán t·ª≠ v√† c√¥ng ngh·ªá");
            Categories clothing = new Categories(2L, "Th·ªùi trang", "Qu·∫ßn √°o v√† ph·ª• ki·ªán th·ªùi trang");
            Categories books = new Categories(3L, "S√°ch", "S√°ch v·ªü v√† t√†i li·ªáu h·ªçc t·∫≠p");

            databaseService.saveCategory(electronics);
            databaseService.saveCategory(clothing);
            databaseService.saveCategory(books);

            // T·∫°o products m·∫´u
            List<Product> sampleProducts = List.of(
                    new Product(1L, "iPhone 15 Pro", "ƒêi·ªán tho·∫°i iPhone 15 Pro 128GB", 25000000, 50, electronics),
                    new Product(2L, "Samsung Galaxy S24", "ƒêi·ªán tho·∫°i Samsung Galaxy S24 Ultra", 28000000, 30,
                            electronics),
                    new Product(3L, "MacBook Pro M3", "Laptop MacBook Pro M3 14 inch", 45000000, 20, electronics),
                    new Product(4L, "√Åo thun nam", "√Åo thun nam cotton 100%", 150000, 100, clothing),
                    new Product(5L, "Qu·∫ßn jean n·ªØ", "Qu·∫ßn jean n·ªØ cao c·∫•p", 350000, 80, clothing),
                    new Product(6L, "Gi√†y sneaker", "Gi√†y sneaker unisex", 800000, 60, clothing),
                    new Product(7L, "S√°ch Clean Code", "S√°ch v·ªÅ l·∫≠p tr√¨nh Clean Code", 200000, 25, books),
                    new Product(8L, "S√°ch Design Patterns", "S√°ch v·ªÅ Design Patterns", 180000, 30, books),
                    new Product(9L, "S√°ch Spring Boot", "S√°ch h∆∞·ªõng d·∫´n Spring Boot", 250000, 40, books),
                    new Product(10L, "iPad Air", "M√°y t√≠nh b·∫£ng iPad Air 64GB", 18000000, 35, electronics));

            for (Product product : sampleProducts) {
                databaseService.saveProduct(product);
                // L∆∞u v√†o vector store ƒë·ªÉ t√¨m ki·∫øm ng·ªØ nghƒ©a
                vectorService.saveProduct(product);
            }

            // L∆∞u categories v√†o vector store
            vectorService.saveCategory(electronics);
            vectorService.saveCategory(clothing);
            vectorService.saveCategory(books);

            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            result.put("message", "‚úÖ Sample data initialized successfully!");
            result.put("categoriesCreated", 3);
            result.put("productsCreated", sampleProducts.size());
            result.put("timestamp", System.currentTimeMillis());

            log.info("‚úÖ Sample data initialization completed");
            return ResponseEntity.ok(result);

        } catch (Exception e) {
            log.error("‚ùå Error initializing sample data", e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "Failed to initialize sample data: " + e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ categories
     * GET /api/data/categories
     */
    @GetMapping("/categories")
    public ResponseEntity<Map<String, Object>> getAllCategories() {
        try {
            List<Categories> categories = databaseService.getAllCategories();

            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            result.put("categories", categories);
            result.put("count", categories.size());
            result.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Error getting categories", e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "Failed to get categories: " + e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ products
     * GET /api/data/products
     */
    @GetMapping("/products")
    public ResponseEntity<Map<String, Object>> getAllProducts() {
        try {
            List<Product> products = databaseService.getAllProducts();

            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            result.put("products", products);
            result.put("count", products.size());
            result.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Error getting products", e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "Failed to get products: " + e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * Th√™m category m·ªõi
     * POST /api/data/categories
     */
    @PostMapping("/categories")
    public ResponseEntity<Map<String, Object>> addCategory(@RequestBody Categories category) {
        try {
            Categories savedCategory = databaseService.saveCategory(category);
            vectorService.saveCategory(savedCategory);

            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            result.put("message", "‚úÖ Category added successfully!");
            result.put("category", savedCategory);
            result.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Error adding category", e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "Failed to add category: " + e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * Th√™m product m·ªõi
     * POST /api/data/products
     */
    @PostMapping("/products")
    public ResponseEntity<Map<String, Object>> addProduct(@RequestBody Product product) {
        try {
            Product savedProduct = databaseService.saveProduct(product);
            vectorService.saveProduct(savedProduct);

            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            result.put("message", "‚úÖ Product added successfully!");
            result.put("product", savedProduct);
            result.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Error adding product", e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "Failed to add product: " + e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * X√≥a t·∫•t c·∫£ d·ªØ li·ªáu
     * DELETE /api/data/clear-all
     */
    @DeleteMapping("/clear-all")
    public ResponseEntity<Map<String, Object>> clearAllData() {
        try {
            // X√≥a t·∫•t c·∫£ products tr∆∞·ªõc
            List<Product> products = databaseService.getAllProducts();
            for (Product product : products) {
                // C√≥ th·ªÉ th√™m logic x√≥a t·ª´ vector store n·∫øu c·∫ßn
            }

            // X√≥a t·∫•t c·∫£ categories
            List<Categories> categories = databaseService.getAllCategories();
            for (Categories category : categories) {
                // C√≥ th·ªÉ th√™m logic x√≥a t·ª´ vector store n·∫øu c·∫ßn
            }

            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            result.put("message", "‚úÖ All data cleared successfully!");
            result.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("‚ùå Error clearing data", e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "Failed to clear data: " + e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
}