package com.example.Chat_Bot_Lang4J.Data.Service;

import com.example.Chat_Bot_Lang4J.Data.Entity.Categories;
import com.example.Chat_Bot_Lang4J.Data.Entity.Product;
import com.example.Chat_Bot_Lang4J.Data.Repository.CategoriesRepository;
import com.example.Chat_Bot_Lang4J.Data.Repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class DatabaseService {

    private final CategoriesRepository categoriesRepository;
    private final ProductRepository productRepository;

    // ========== CATEGORIES OPERATIONS ==========

    /**
     * L·∫•y t·∫•t c·∫£ categories
     */
    public List<Categories> getAllCategories() {
        return categoriesRepository.findAll();
    }

    /**
     * T√¨m category theo ID
     */
    public Optional<Categories> getCategoryById(Long id) {
        return categoriesRepository.findById(id);
    }

    /**
     * T√¨m category theo t√™n
     */
    public Optional<Categories> getCategoryByName(String name) {
        return categoriesRepository.findByName(name);
    }

    /**
     * T√¨m categories c√≥ ch·ª©a t·ª´ kh√≥a
     */
    public List<Categories> searchCategories(String keyword) {
        List<Categories> byName = categoriesRepository.findByNameContainingIgnoreCase(keyword);
        List<Categories> byDescription = categoriesRepository.findByDescriptionContainingIgnoreCase(keyword);

        // Merge v√† lo·∫°i b·ªè duplicate
        byName.addAll(byDescription);
        return byName.stream().distinct().toList();
    }

    /**
     * L·∫•y categories c√≥ s·∫£n ph·∫©m
     */
    public List<Categories> getCategoriesWithProducts() {
        return categoriesRepository.findCategoriesWithProducts();
    }

    /**
     * L∆∞u category m·ªõi
     */
    public Categories saveCategory(Categories category) {
        return categoriesRepository.save(category);
    }

    // ========== PRODUCTS OPERATIONS ==========

    /**
     * L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
     */
    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    /**
     * T√¨m s·∫£n ph·∫©m theo ID
     */
    public Optional<Product> getProductById(Long id) {
        return productRepository.findById(id);
    }

    /**
     * T√¨m s·∫£n ph·∫©m theo t√™n
     */
    public Optional<Product> getProductByName(String name) {
        return productRepository.findByName(name);
    }

    /**
     * T√¨m s·∫£n ph·∫©m theo t·ª´ kh√≥a
     */
    public List<Product> searchProducts(String keyword) {
        List<Product> byName = productRepository.findByNameContainingIgnoreCase(keyword);
        List<Product> byDescription = productRepository.findByDescriptionContainingIgnoreCase(keyword);

        // Merge v√† lo·∫°i b·ªè duplicate
        byName.addAll(byDescription);
        return byName.stream().distinct().toList();
    }

    /**
     * T√¨m s·∫£n ph·∫©m theo category
     */
    public List<Product> getProductsByCategory(Long categoryId) {
        return productRepository.findByCategoryId(categoryId);
    }

    /**
     * T√¨m s·∫£n ph·∫©m theo kho·∫£ng gi√°
     */
    public List<Product> getProductsByPriceRange(double minPrice, double maxPrice) {
        return productRepository.findByPriceBetween(minPrice, maxPrice);
    }

    /**
     * T√¨m s·∫£n ph·∫©m c√≤n h√†ng
     */
    public List<Product> getAvailableProducts() {
        return productRepository.findByStockQuantityGreaterThan(0);
    }

    /**
     * T√¨m s·∫£n ph·∫©m ph·ªï bi·∫øn
     */
    public List<Product> getPopularProducts() {
        return productRepository.findPopularProducts();
    }

    /**
     * T√¨m s·∫£n ph·∫©m theo nhi·ªÅu ti√™u ch√≠
     */
    public List<Product> getProductsByCriteria(String name, Long categoryId,
            Double minPrice, Double maxPrice, Integer minStock) {
        return productRepository.findProductsByCriteria(name, categoryId, minPrice, maxPrice, minStock);
    }

    /**
     * L∆∞u s·∫£n ph·∫©m m·ªõi
     */
    public Product saveProduct(Product product) {
        return productRepository.save(product);
    }

    /**
     * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho
     */
    public Product updateStockQuantity(Long productId, int newQuantity) {
        Optional<Product> productOpt = productRepository.findById(productId);
        if (productOpt.isPresent()) {
            Product product = productOpt.get();
            product.setStockQuantity(newQuantity);
            return productRepository.save(product);
        }
        throw new RuntimeException("Product not found with ID: " + productId);
    }

    // ========== STATISTICS OPERATIONS ==========

    /**
     * L·∫•y th·ªëng k√™ t·ªïng quan
     */
    public String getDatabaseStatistics() {
        long totalCategories = categoriesRepository.count();
        long totalProducts = productRepository.count();
        long availableProducts = productRepository.findByStockQuantityGreaterThan(0).size();
        long outOfStockProducts = productRepository.findByStockQuantity(0).size();

        return String.format("""
                üìä TH·ªêNG K√ä C∆† S·ªû D·ªÆ LI·ªÜU:
                ‚Ä¢ T·ªïng s·ªë danh m·ª•c: %d
                ‚Ä¢ T·ªïng s·ªë s·∫£n ph·∫©m: %d
                ‚Ä¢ S·∫£n ph·∫©m c√≤n h√†ng: %d
                ‚Ä¢ S·∫£n ph·∫©m h·∫øt h√†ng: %d
                """, totalCategories, totalProducts, availableProducts, outOfStockProducts);
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt s·∫£n ph·∫©m
     */
    public String getProductDetails(Long productId) {
        Optional<Product> productOpt = productRepository.findById(productId);
        if (productOpt.isPresent()) {
            Product product = productOpt.get();
            return String.format("""
                    üì¶ CHI TI·∫æT S·∫¢N PH·∫®M:
                    ‚Ä¢ ID: %d
                    ‚Ä¢ T√™n: %s
                    ‚Ä¢ M√¥ t·∫£: %s
                    ‚Ä¢ Gi√°: %.2f VNƒê
                    ‚Ä¢ S·ªë l∆∞·ª£ng t·ªìn kho: %d
                    ‚Ä¢ Danh m·ª•c: %s
                    """,
                    product.getId(),
                    product.getName(),
                    product.getDescription(),
                    product.getPrice(),
                    product.getStockQuantity(),
                    product.getCategory() != null ? product.getCategory().getName() : "Kh√¥ng c√≥ danh m·ª•c");
        }
        return "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + productId;
    }
}